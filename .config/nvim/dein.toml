[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'tomasr/molokai'

[[plugins]]
repo = 'y-yamagata/ezbuffer.vim'
hook_add = '''
    nnoremap <silent>eb :EzBuffer<CR>
'''

# You have to execute above commands
# brew install python3
# pip3 install -U neovim
[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
call defx#custom#option('_', {
    \ 'winwidth': 40,
    \ 'split': 'vertical',
    \ 'direction': 'topleft',
    \ 'show_ignored_files': 1,
    \ 'buffer_name': 'exlorer',
    \ 'toggle': 1,
    \ 'resume': 1,
    \ })

nnoremap <silent><BS><BS> :<C-u>Defx `expand('%:p:h')` -search=`expand('%:p')`<CR>
autocmd FileType defx call s:defx_my_settings()
function! s:defx_my_settings() abort
    " Define mappings
    nnoremap <silent><buffer><expr> <CR> defx#do_action('drop')
    " nnoremap <silent><buffer><expr> c defx#do_action('copy')
    " nnoremap <silent><buffer><expr> m defx#do_action('move')
    " nnoremap <silent><buffer><expr> p defx#do_action('paste')
    nnoremap <silent><buffer><expr> l defx#do_action('drop')
    nnoremap <silent><buffer><expr> E defx#do_action('drop', 'vsplit')
    nnoremap <silent><buffer><expr> P defx#do_action('drop', 'pedit')
    nnoremap <silent><buffer><expr> o defx#do_action('open_or_close_tree')
    " nnoremap <silent><buffer><expr> K defx#do_action('new_directory')
    nnoremap <silent><buffer><expr> N defx#do_action('new_file')
    " nnoremap <silent><buffer><expr> M defx#do_action('new_multiple_files')
    nnoremap <silent><buffer><expr> C defx#do_action('toggle_columns', 'mark:indent:icon:filename:type:size:time')
    nnoremap <silent><buffer><expr> S defx#do_action('toggle_sort', 'time')
    " nnoremap <silent><buffer><expr> d defx#do_action('remove')
    " nnoremap <silent><buffer><expr> r defx#do_action('rename')
    " nnoremap <silent><buffer><expr> ! defx#do_action('execute_command')
    " nnoremap <silent><buffer><expr> x defx#do_action('execute_system')
    nnoremap <silent><buffer><expr> yy defx#do_action('yank_path')
    nnoremap <silent><buffer><expr> . defx#do_action('toggle_ignored_files')
    nnoremap <silent><buffer><expr> ; defx#do_action('repeat')
    nnoremap <silent><buffer><expr> h defx#do_action('cd', ['..'])
    nnoremap <silent><buffer><expr> ~ defx#do_action('cd')
    nnoremap <silent><buffer><expr> q defx#do_action('quit')
    " nnoremap <silent><buffer><expr> <Space> defx#do_action('toggle_select') . 'j'
    " nnoremap <silent><buffer><expr> * defx#do_action('toggle_select_all')
    nnoremap <silent><buffer><expr> j line('.') == line('$') ? 'gg' : 'j'
    nnoremap <silent><buffer><expr> k line('.') == 1 ? 'G' : 'k'
    nnoremap <silent><buffer><expr> <C-l> defx#do_action('redraw')
    nnoremap <silent><buffer><expr> <C-g> defx#do_action('print')
    nnoremap <silent><buffer><expr> cd defx#do_action('change_vim_cwd')
endfunction
'''

# [[plugins]]
# repo = 'Shougo/vimfiler.vim'
# hook_add = '''
#     let g:vimfiler_as_default_explorer = 1
#     let g:vimfiler_min_cache_files = 256
#     nnoremap <silent><BS><BS> :VimFiler<CR>
# '''

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
merged = '0'
hook_add = '''
    "set cmdheight=2
    set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}\ %f

    inoremap <silent><expr> <TAB>
        \ pumvisible() ? "\<C-n>" :
        \ <SID>check_back_space() ? "\<TAB>" :
        \ coc#refresh()
    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

    function! s:check_back_space() abort
        let col = col('.') - 1
        return !col || getline('.')[col - 1]  =~# '\s'
    endfunction

    inoremap <silent><expr> <c-space> coc#refresh()

    inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

    nmap <silent> [g <Plug>(coc-diagnostic-prev)
    nmap <silent> ]g <Plug>(coc-diagnostic-next)

    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gy <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)

    nnoremap <silent> K :call <SID>show_documentation()<CR>

    function! s:show_documentation()
        if (index(['vim','help'], &filetype) >= 0)
            execute 'h '.expand('<cword>')
        else
            call CocAction('doHover')
        endif
    endfunction

    autocmd CursorHold * silent call CocActionAsync('highlight')

    nmap <leader>rn <Plug>(coc-rename)

    xmap <leader>f  <Plug>(coc-format-selected)
    nmap <leader>f  <Plug>(coc-format-selected)

    augroup mygroup
        autocmd!
        autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
        autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
    augroup end

    xmap <leader>a  <Plug>(coc-codeaction-selected)
    nmap <leader>a  <Plug>(coc-codeaction-selected)

    nmap <leader>ac  <Plug>(coc-codeaction)
    nmap <leader>qf  <Plug>(coc-fix-current)

    xmap if <Plug>(coc-funcobj-i)
    xmap af <Plug>(coc-funcobj-a)
    omap if <Plug>(coc-funcobj-i)
    omap af <Plug>(coc-funcobj-a)

    command! -nargs=0 Format :call CocAction('format')
    command! -nargs=? Fold :call     CocAction('fold', <f-args>)
    command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

    nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
    nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
    nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
    nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
    nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
    nnoremap <silent> <space>j  :<C-u>CocNext<CR>
    nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
    nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
'''
