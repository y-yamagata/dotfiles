[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'tomasr/molokai'

[[plugins]]
repo = 'leafgarland/typescript-vim'

[[plugins]]
repo = 'y-yamagata/ezbuffer.vim'
hook_add = '''
    nnoremap <silent>eb :EzBuffer<CR>
'''

[[plugins]]
repo = 'Shougo/vimfiler.vim'
hook_add = '''
    let g:vimfiler_as_default_explorer = 1
    let g:vimfiler_min_cache_files = 256
    nnoremap <silent><BS><BS> :VimFiler<CR>
'''

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/unite.vim'
depends = 'neomru.vim'

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
merged = '0'
hook_add = '''
    "set cmdheight=2
    set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}\ %f

    inoremap <silent><expr> <TAB>
        \ pumvisible() ? "\<C-n>" :
        \ <SID>check_back_space() ? "\<TAB>" :
        \ coc#refresh()
    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

    function! s:check_back_space() abort
        let col = col('.') - 1
        return !col || getline('.')[col - 1]  =~# '\s'
    endfunction

    inoremap <silent><expr> <c-space> coc#refresh()

    inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

    nmap <silent> [g <Plug>(coc-diagnostic-prev)
    nmap <silent> ]g <Plug>(coc-diagnostic-next)

    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gy <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)

    nnoremap <silent> K :call <SID>show_documentation()<CR>

    function! s:show_documentation()
        if (index(['vim','help'], &filetype) >= 0)
            execute 'h '.expand('<cword>')
        else
            call CocAction('doHover')
        endif
    endfunction

    autocmd CursorHold * silent call CocActionAsync('highlight')

    nmap <leader>rn <Plug>(coc-rename)

    xmap <leader>f  <Plug>(coc-format-selected)
    nmap <leader>f  <Plug>(coc-format-selected)

    augroup mygroup
        autocmd!
        autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
        autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
    augroup end

    xmap <leader>a  <Plug>(coc-codeaction-selected)
    nmap <leader>a  <Plug>(coc-codeaction-selected)

    nmap <leader>ac  <Plug>(coc-codeaction)
    nmap <leader>qf  <Plug>(coc-fix-current)

    xmap if <Plug>(coc-funcobj-i)
    xmap af <Plug>(coc-funcobj-a)
    omap if <Plug>(coc-funcobj-i)
    omap af <Plug>(coc-funcobj-a)

    command! -nargs=0 Format :call CocAction('format')
    command! -nargs=? Fold :call     CocAction('fold', <f-args>)
    command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

    nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
    nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
    nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
    nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
    nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
    nnoremap <silent> <space>j  :<C-u>CocNext<CR>
    nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
    nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
'''

# [[plugins]]
# repo = 'scrooloose/syntastic'
# hook_add = '''
#     let g:syntastic_swift_checkers = ['swiftlint']
#     if isdirectory(getcwd() . '/src/main/java')
#         let g:syntastic_java_javac_classpath = getcwd() . '/src/main/java'
#     endif
#     let g:syntastic_cpp_compiler_options = ' -std=c++11 -stdlib=libc++'
# '''

# [[plugins]]
# repo = 'Shougo/vimproc.vim'
# hook_post_update = '''
#     if dein#util#_is_windows()
#         let cmd = 'tools\\update-dll-mingw'
#     elseif dein#util#_is_cygwin()
#         let cmd = 'make -f make_cygwin.mak'
#     elseif executable('gmake')
#         let cmd = 'gmake'
#     else
#         let cmd = 'make'
#     endif
#     let g:dein#plugin.build = cmd
# '''
